import r from"fs";let e=async(r,e,t=[])=>{try{let s=await r.query(e,t);return{success:!0,rows:s.rows,data:s.rows,error:void 0}}catch(r){return console.error("쿼리 실행 실패:",r),{success:!1,rows:void 0,data:void 0,error:r instanceof Error?r:Error(r instanceof Error?r.message:"알 수 없는 오류가 발생했습니다.")}}},t=async(r,e)=>{try{await r.query("BEGIN");let t=[];try{for(let s of e){let e=await r.query(s.query,s.params||[]);t.push(e.rows)}return await r.query("COMMIT"),{success:!0,data:t}}catch(e){throw await r.query("ROLLBACK"),e}}catch(r){return{success:!1,error:r}}},s=async(e,t)=>{try{let{rows:s}=await e.query("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'");if(0===s.length)throw Error("백업할 테이블이 없습니다.");let a={};for(let{table_name:r}of s){let{rows:t}=await e.query(`SELECT * FROM ${r}`);a[r]=t}return await r.promises.writeFile(t,JSON.stringify(a,null,2)),{success:!0,tables:Object.keys(a)}}catch(r){return console.error("백업 실행 중 오류:",r),{success:!1,error:r}}},a=async(e,t)=>{try{if(!r.existsSync(t))return console.error("백업 파일을 찾을 수 없습니다:",t),{success:!1,error:Error("백업 파일을 찾을 수 없습니다.")};let s=JSON.parse(r.readFileSync(t,"utf-8"));await e.query("BEGIN");try{for(let[r,t]of Object.entries(s))if(Array.isArray(t)&&t.length>0){let s=Object.keys(t[0]),a=s.map((r,e)=>`$${e+1}`).join(","),o=`INSERT INTO ${r} (${s.join(",")}) VALUES (${a})`;for(let r of t)await e.query(o,Object.values(r))}return await e.query("COMMIT"),{success:!0}}catch(r){throw await e.query("ROLLBACK"),r}}catch(r){return console.error("복원 실행 중 오류:",r),{success:!1,error:r}}};export{e as executeQuery,t as executeTransaction,s as backup,a as restore};
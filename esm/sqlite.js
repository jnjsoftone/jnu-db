import e from"fs";import r from"path";let t=async(e,r,t)=>new Promise(s=>{e.all(r,t,(e,r)=>{e?s({success:!1,error:e}):s({success:!0,data:r})})}),s=async(e,r)=>new Promise(t=>{let s=0,a=(r,t)=>new Promise((s,a)=>{e.run(r,t,function(e){e?a(e):s(this.changes||0)})}),c=async()=>{try{for(let{query:e,params:t}of(await a("BEGIN TRANSACTION"),r)){let r=await a(e,t);s+=r}await a("COMMIT"),t({success:!0,data:{affectedRows:s}})}catch(e){try{await a("ROLLBACK")}catch(e){console.error("롤백 중 오류:",e)}t({success:!1,error:e})}};e.serialize(()=>{c()})}),a=async(s,a)=>{try{let c=r.dirname(a);e.existsSync(c)||e.mkdirSync(c,{recursive:!0});let o=await t(s,"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'");if(!o.success)throw o.error;let i={};for(let{name:e}of o.data||[]){let r=await t(s,`SELECT * FROM ${e}`);r.success&&r.data&&(i[e]=r.data)}return e.writeFileSync(a,JSON.stringify(i,null,2)),{success:!0}}catch(e){return console.error("백업 실행 중 오류:",e),{success:!1,error:e}}},c=async(r,s)=>{try{if(!e.existsSync(s))return console.error("백업 파일을 찾을 수 없습니다:",s),{success:!1,error:Error("백업 파일을 찾을 수 없습니다.")};let a=JSON.parse(e.readFileSync(s,"utf-8"));await t(r,"BEGIN TRANSACTION");try{for(let[e,s]of Object.entries(a))if(Array.isArray(s)&&s.length>0){let a=Object.keys(s[0]),c=a.map(()=>"?").join(","),o=`INSERT INTO ${e} (${a.join(",")}) VALUES (${c})`;for(let e of s)await t(r,o,Object.values(e))}return await t(r,"COMMIT"),{success:!0}}catch(e){throw await t(r,"ROLLBACK"),e}}catch(e){return console.error("복원 실행 중 오류:",e),{success:!1,error:e}}};export{t as executeQuery,s as executeTransaction,a as backup,c as restore};
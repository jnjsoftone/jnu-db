import{PrismaClient as r}from"@prisma/client";import{saveJson as e,loadJson as t}from"jnu-abc";let a=async e=>{try{let t=new r({datasources:{db:{url:e.datasource.url}}});return await t.$connect(),t}catch(r){return console.error("Prisma 연결 오류:",r),null}},c=async r=>{try{await r.$disconnect()}catch(r){console.error("Prisma 연결 해제 오류:",r)}},s=async(r,e,t,a={})=>{try{let c=await r[e][t](a);return{success:!0,data:c}}catch(r){return{success:!1,error:r instanceof Error?r.message:"알 수 없는 오류"}}},n=async(r,e)=>{try{let t=await r.$transaction(e.map(e=>r[e.model][e.operation](e.args)));return{success:!0,data:t}}catch(r){return{success:!1,error:r instanceof Error?r.message:"알 수 없는 오류"}}},o=async(r,t)=>{try{let a=Object.keys(r).filter(e=>"object"==typeof r[e]&&void 0!==r[e].findMany),c={};for(let e of a){let t=await r[e].findMany();c[e]=t}return await e(t,c),{success:!0}}catch(r){return{success:!1,error:r instanceof Error?r.message:"알 수 없는 오류"}}},i=async(r,e)=>{try{let a=await t(e);return await r.$transaction(Object.entries(a).map(([e,t])=>{if(Array.isArray(t)&&t.length>0)return r[e].createMany({data:t,skipDuplicates:!0})})),{success:!0}}catch(r){return{success:!1,error:r instanceof Error?r.message:"알 수 없는 오류"}}};export{a as connect,c as disconnect,s as executeQuery,n as executeTransaction,o as backup,i as restore};